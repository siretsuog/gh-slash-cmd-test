name: backport-command
on:
  repository_dispatch:
    types: [backport-command]
jobs:
  backport:
    runs-on: ubuntu-latest
    steps:
      - name: Get assignees
        env:
          ASSIGNEES: ${{ toJson(github.event.client_payload.github.payload.issue.assignees) }}
        id: assignees
        run: echo ::set-output name=assignees::$(echo "$ASSIGNEES" | jq -r '.[].login' | paste -s -d ',' -)

      - name: Get branch
        env:
          BRANCH: ${{ toJson(github.event.client_payload.slash_command.args.unnamed.arg1) }}
        id: branch
        run: echo ::set-output name=branch::"$BRANCH"

      - name: Discover and create milestone
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_BOT_TOKEN }}
        id: milestone
        run: |
          org=${{ toJson(github.event.client_payload.slash_command.args.named.org) }}
          repo=${{ toJson(github.event.client_payload.slash_command.args.named.repo) }}
          if [[ ${{ toJson(github.event.client_payload.slash_command.args.named.milestone) }} == 'auto' ]]; then
            major=$(echo "${{ toJson(github.event.client_payload.slash_command.args.unnamed.arg1) }}" | grep -Eo '^(v[0-9][0-9].[0-9][0-9])')
            latest_released=$(gh api repos/redpanda-data/redpanda/releases --jq '.[] | select(.draft==false).name'  | grep "${major}" | head -1)
            # latest_released=$(gh api "repos/${org}/${repo}/releases" --jq '.[] | select(.draft==false).name'  | grep "${major}" | head -1)
            assigne_milestone=$(echo ${latest_released} | awk -F. -v OFS=. '{$NF += 1 ; print}')
          else
            assigne_milestone=${{ toJson(github.event.client_payload.slash_command.args.named.milestone) }}
          fi
          if [[ $(gh api "repos/${org}/${repo}/milestones" --jq .[].title | grep "${assigne_milestone}") == "" ]]; then
            gh api "repos/${org}/${repo}/milestones" --silent --method POST -f title="${assigne_milestone}"
            sleep 20
          fi
          echo ::set-output name=milestone::${assigne_milestone}

      - name: Create issue
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_BOT_TOKEN }}
        run: |
          backport_branch=${{ steps.branch.outputs.branch }}
          gh issue create --title "[${backport_branch}] Backport ${{ toJson(github.event.client_payload.github.payload.issue.title) }} to [${backport_branch}](https://github.com/redpanda-data/redpanda/tree/${backport_branch})" \
            --repo ${{ toJson(github.event.client_payload.slash_command.args.named.org) }}/${{ toJson(github.event.client_payload.slash_command.args.named.repo) }} \
            --assignee "${{ steps.assignees.outputs.assignees }}" \
            --milestone "${{ steps.milestone.outputs.milestone }}" \
            --body "issue: ${{ toJson(github.event.client_payload.github.payload.comment.issue_url) }}"

      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray